"use strict";(self.webpackChunkfrontend_dairy=self.webpackChunkfrontend_dairy||[]).push([[529],{3905:(t,r,e)=>{e.d(r,{Zo:()=>u,kt:()=>d});var n=e(7294);function a(t,r,e){return r in t?Object.defineProperty(t,r,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[r]=e,t}function l(t,r){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(t,r).enumerable}))),e.push.apply(e,n)}return e}function i(t){for(var r=1;r<arguments.length;r++){var e=null!=arguments[r]?arguments[r]:{};r%2?l(Object(e),!0).forEach((function(r){a(t,r,e[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):l(Object(e)).forEach((function(r){Object.defineProperty(t,r,Object.getOwnPropertyDescriptor(e,r))}))}return t}function o(t,r){if(null==t)return{};var e,n,a=function(t,r){if(null==t)return{};var e,n,a={},l=Object.keys(t);for(n=0;n<l.length;n++)e=l[n],r.indexOf(e)>=0||(a[e]=t[e]);return a}(t,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)e=l[n],r.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(a[e]=t[e])}return a}var s=n.createContext({}),g=function(t){var r=n.useContext(s),e=r;return t&&(e="function"==typeof t?t(r):i(i({},r),t)),e},u=function(t){var r=g(t.components);return n.createElement(s.Provider,{value:r},t.children)},p="mdxType",c={inlineCode:"code",wrapper:function(t){var r=t.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(t,r){var e=t.components,a=t.mdxType,l=t.originalType,s=t.parentName,u=o(t,["components","mdxType","originalType","parentName"]),p=g(e),m=a,d=p["".concat(s,".").concat(m)]||p[m]||c[m]||l;return e?n.createElement(d,i(i({ref:r},u),{},{components:e})):n.createElement(d,i({ref:r},u))}));function d(t,r){var e=arguments,a=r&&r.mdxType;if("string"==typeof t||a){var l=e.length,i=new Array(l);i[0]=m;var o={};for(var s in r)hasOwnProperty.call(r,s)&&(o[s]=r[s]);o.originalType=t,o[p]="string"==typeof t?t:a,i[1]=o;for(var g=2;g<l;g++)i[g]=e[g];return n.createElement.apply(null,i)}return n.createElement.apply(null,e)}m.displayName="MDXCreateElement"},3690:(t,r,e)=>{e.r(r),e.d(r,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>g});var n=e(7462),a=(e(7294),e(3905));const l={id:"alg-sorting-onlogn",slug:"/algorithms/sorting/onlogn",title:"O(nlogn) Sorting Algorithms",sidebar_label:"O(nlogn)"},i="O(nlogn) Sorting Algorithms",o={unversionedId:"algorithms/sorting/alg-sorting-onlogn",id:"algorithms/sorting/alg-sorting-onlogn",title:"O(nlogn) Sorting Algorithms",description:"Introduction",source:"@site/docs/algorithms/sorting/Onlogn.md",sourceDirName:"algorithms/sorting",slug:"/algorithms/sorting/onlogn",permalink:"/docs/algorithms/sorting/onlogn",draft:!1,tags:[],version:"current",frontMatter:{id:"alg-sorting-onlogn",slug:"/algorithms/sorting/onlogn",title:"O(nlogn) Sorting Algorithms",sidebar_label:"O(nlogn)"},sidebar:"tutorialSidebar",previous:{title:"O(n^2)",permalink:"/docs/algorithms/sorting/on2"},next:{title:"Tutorials",permalink:"/docs/category/tutorials"}},s={},g=[{value:"Introduction",id:"introduction",level:2},{value:"Comparisons",id:"comparisons",level:2},{value:"Implementations",id:"implementations",level:2},{value:"Merge Sort",id:"merge-sort",level:3},{value:"Quick Sort",id:"quick-sort",level:3},{value:"Conclusion",id:"conclusion",level:2}],u={toc:g},p="wrapper";function c(t){let{components:r,...l}=t;return(0,a.kt)(p,(0,n.Z)({},u,l,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"onlogn-sorting-algorithms"},"O(nlogn) Sorting Algorithms"),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Merge Sort is a divide and conquer algorithm that divides the input array into two halves, calls itself for the two halves, and then merges the two sorted halves."),(0,a.kt)("li",{parentName:"ul"},"Quick Sort is a divide and conquer algorithm that picks an element as pivot and partitions the given array around the picked pivot.")),(0,a.kt)("h2",{id:"comparisons"},"Comparisons"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Algorithm"),(0,a.kt)("th",{parentName:"tr",align:null},"Best"),(0,a.kt)("th",{parentName:"tr",align:null},"Average"),(0,a.kt)("th",{parentName:"tr",align:null},"Worst"),(0,a.kt)("th",{parentName:"tr",align:null},"Space"),(0,a.kt)("th",{parentName:"tr",align:null},"Stable?"),(0,a.kt)("th",{parentName:"tr",align:null},"In-Place?"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Merge Sort"),(0,a.kt)("td",{parentName:"tr",align:null},"O(nlogn)"),(0,a.kt)("td",{parentName:"tr",align:null},"O(nlogn)"),(0,a.kt)("td",{parentName:"tr",align:null},"O(nlogn)"),(0,a.kt)("td",{parentName:"tr",align:null},"O(n)"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes"),(0,a.kt)("td",{parentName:"tr",align:null},"No")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Quick Sort"),(0,a.kt)("td",{parentName:"tr",align:null},"O(nlogn)"),(0,a.kt)("td",{parentName:"tr",align:null},"O(nlogn)"),(0,a.kt)("td",{parentName:"tr",align:null},"O(n^2)"),(0,a.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,a.kt)("td",{parentName:"tr",align:null},"No"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,a.kt)("h2",{id:"implementations"},"Implementations"),(0,a.kt)("h3",{id:"merge-sort"},"Merge Sort"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Merge Sort",src:e(6783).Z,width:"300",height:"180"})),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://visualgo.net/en/sorting"},"Visual Sorting")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const mergeSort = (arr) => {\n  if (arr.length <= 1) return arr;\n\n  const mid = arr.length >> 1;\n  const left = mergeSort(arr.slice(0, mid));\n  const right = mergeSort(arr.slice(mid));\n\n  return merge(left, right);\n}\n\nconst merge = (leftArr, rightArr) => {\n  let mergedArr = [];\n  let [l, r] = [0, 0];\n\n  while (l < leftArr.length || r < rightArr.length) {\n    if (l < leftArr.length && leftArr[l] < rightArr[r] || r >= rightArr.length) {\n      mergedArr.push(leftArr[l++]);\n    } else {\n      mergedArr.push(rightArr[r++]);\n    }\n  }\n\n  return mergedArr;\n}\n\nexport default mergeSort;\n")),(0,a.kt)("h3",{id:"quick-sort"},"Quick Sort"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Quick Sort",src:e(5378).Z,width:"300",height:"180"})),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://visualgo.net/en/sorting"},"Visual Sorting"),"  "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const quickSort = (arr, n) => {\n  quickSortC(arr, 0, n - 1);\n}\n\nconst quickSortC = (arr, left, right) => {\n  if (left >= right) return;\n\n  const pivot = partition(arr, left, right);\n  quickSortC(arr, left, pivot - 1);\n  quickSortC(arr, pivot + 1, right);\n}\n\nconst partition = (arr, left, right) => {\n  const pivot = arr[right];\n  let i = left;\n\n  for (let j = left; j < right; j++) {\n    if (arr[j] < pivot) {\n      swap(arr, i, j);\n      i++;\n    }\n  }\n\n  swap(arr, i, right);\n\n  return i;\n}\n\nconst swap = (arr, i, j) => {\n  [arr[i], arr[j]] = [arr[j], arr[i]];\n}\n\nexport default quickSort;\n")),(0,a.kt)("h2",{id:"conclusion"},"Conclusion"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Merge Sort is a stable algorithm, but it requires O(n) extra space."),(0,a.kt)("li",{parentName:"ul"},"Quick Sort is an in-place algorithm, but it is not stable."),(0,a.kt)("li",{parentName:"ul"},"Merge Sort is preferred for linked lists, while Quick Sort is preferred for arrays."),(0,a.kt)("li",{parentName:"ul"},"Merge Sort is preferred when stability is a concern, while Quick Sort is preferred when we need faster sorting.")))}c.isMDXComponent=!0},6783:(t,r,e)=>{e.d(r,{Z:()=>n});const n=e.p+"assets/images/Merge-sort-example-300px-274044dcc60eee46717f6b5fa8259933.gif"},5378:(t,r,e)=>{e.d(r,{Z:()=>n});const n=e.p+"assets/images/Quicksort-example-1f34ac910005055a38e0a9df1ee21386.gif"}}]);